

Imperative and Procedural Programming
명령과 절차를 따라가는 프로그래밍
- 하나의 어플리케이션을 만든다면, 어플리케이션이 동작하기 위한 데이터와 함수들 위주로 구성하는 프로그래밍.
- 보통 제일 처음에 실행되는 main이라는 함수가 있다.
- 정의된 순서대로 절차적으로 함수가 하나씩 호출하는 방식.
- 단점)
    1. 내가 프로젝트에 신규로 투입이 되었다면 함수가 여러가지가 얽혀있고,
    데이터도 다른 곳에서 업데이트가 될 수 있기 때문에 하나를 수정하기 위해서는 전체적인 어플리케이션이 어떻게 동작하는지를 잘 이해해야할 필요가 있음.
    2. 하나를 수정했을때 다른 사이드 이펙트가 일어날 수 있고, 한눈에 알아보기가 힘들다.
    3. 유지보수가 힘들고 확장하기가 힘들다.



Object Oriented Programming
- 프로그램을 객체로 정의해서 객체들끼리 서로 의사소통 하도록 디자인하고 코딩하는 것.
- 서로 관련 있는 데이터와 함수를 여러가지 오브젝트로 정의해서 프로그래밍 해나가는 것을 말한다.
- 세상을 살면서 흔하게 볼수있는 오브젝트들을 말한다.
- 사람과 가까운 생각을 하면서 프로그래밍하는 방식.
- 장점)
    1. 만약 한곳에서 문제가 생긴다면 관련있는 객체만 이해하고 수정하면 된다.
    2. 여러번 반복되는 곳이 있다면 관련된 객체만 다시 사용하면 됨.
    3. 새로운 기능이 필요하다면, 새로운 객체만 만들면 됨. -> 확장성이 용이함.
    4. 생산성을 높여주고 조금 더 높은 퀄리티, 더 빠른 구현과 새로운 기능, 유지보수가 쉬움.