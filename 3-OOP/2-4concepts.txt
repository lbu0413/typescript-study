1. Encapsulation
2. Abstraction
3. Inheritance
4. Polymorphism

- Encapsulation
    * 흩어져 있는 데이터와 객체들을 모아서 캡슐화 하는 것
    * 예를 들어 감기약 캡슐 안에는 다양한 성분이 들어있을 수 있다. 어떤 것이 들어있는지 우리는 상관하지 않고 감기가 낫기 위해서는 감기약만 먹으면 됨.
    * 마찬가지로, 서로 관련있는 데이터와 함수를 한 오브젝트에 담아두고, 외부에서 보일 필요가 없는 데이터를 잘 숨겨 놓음으로써 캡슐화를 하는 것.
    * Encapsulation 예)
    - 고양이에게 "이제 배고파 해", "이제 피곤해 해", "이제 행복해 해" 라고 고양이 내부의 상태를 외부에서 설정할 수 없다.
    - 고양이가 배고프고 피곤하고 행복한 상태들은 고양이 내부에 있는 상태.
    - 다만 우리가 놀아주고, 먹을 것을 주면서 고양이 내부의 상태를 변경할 수는 있다.


- Abstraction
    * 내부의 복잡한 이런 기능을 우리가 다 이해하지 않고, 외부에서 간단한 인터페이스를 통해서 쓸 수 있는 것.
    * 예를 들어 커피머신이 있다면, 우리가 커피머신이 내부에서 어떻게 동작하는지 내부구조를 다 이해하지 않아도, 기계에서 제공하는 간단한 버튼만 누르면 커피를 만들 수 있다.
    * 이처럼, 외부에서는 내부구조가 얼마나 복잡한지, 어떻게 구성되어 있는지 신경쓰지 않고 지정된 인터페이스 함수를 통해 오브젝트를 사용할 수 있다.

- Inheritance
    * 커피기계 오브젝트 상속을 통해 내가 원하는 기능을 새로 추가하고 다른 종류의 커피 기계를 만들어 볼 수 있다.
    * 상속을 이용하면, 한번 잘 정의해둔 클래스를 재사용이 가능하다.
    * Parent class와, child class 혹은 super class와 sub class, base class와 derived class라고도 부른다.
    * 이런 관계를 IS-A 관계라고 부른다. 
    inheritance ex)
        * animal이라는 클래스와 makeSound()라는 메소드가 있다.
        * 이 animal 클래스를 상속받은 dog, cat, pig class가 있다.
        * 상속을 했기 때문에 다 공통적인 makeSound()라는 메소드를 가질 수 있다.
    another ex)
                * 브라우저 DOM을 예를 들면
                        Event Target
                            |
                            Node
                            |
                Document - Element - Text
                            |
                        HTMLElement
                * 우리가 사용하는 HTMLElement는 Element를 상속,
                * Element는 Node를 상속,
                * Node는 Event Target을 상속 받는다.
                * HTMLElement는 위에 모든 부모에게 상속받은 메소드를 사용하는 것이 가능.


- Polymorphism
    * 다형성은 이렇게 상속을 통해서 만들어진 강아지나 고양이, 돼지를 어떤 종류의 동물인지 상관하지 않고, animal에 정의된 makeSound()를 공통적으로 사용할 수 있다.